name: CI/CD

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_NAME: my-backend
  AZURE_LOCATION: southeastasia
  ACR_NAME: terralearnregistry01
  ACR_RESOURCE_GROUP: myResourceGroup

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.PROJECT_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ github.run_number }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image output
        id: image
        run: echo "image=${{ env.ACR_NAME }}.azurecr.io/${{ env.PROJECT_NAME }}:v${{ github.run_number }}" >> $GITHUB_OUTPUT

  terraform_deploy:
    name: Terraform Deploy to Azure
    needs: build_and_push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -input=false

      - name: Import existing ACI
        run: |
          terraform import azurerm_container_group.ci "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.PROJECT_NAME }}-rg/providers/Microsoft.ContainerInstance/containerGroups/${{ env.PROJECT_NAME }}-aci"

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan -var "project_name=${{ env.PROJECT_NAME }}" -var "location=${{ env.AZURE_LOCATION }}" -var "acr_name=${{ env.ACR_NAME }}" -var "acr_resource_group_name=${{ env.ACR_RESOURCE_GROUP }}" -var "image_tag=v${{ github.run_number }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan


